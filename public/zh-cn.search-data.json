{"/zh-cn/about/":{"data":{"":"Hextra 是一款简洁、快速、灵活的主题，适用于构建现代化静态站点。Hextra 特别适用于文档网站，但也可用于构建博客、个人网站等各种类型的网站。\nHugo 和 Jekyll 类似，是一个静态网站生成器。但与其他生成器不同，Hugo 只有单个可执行文件，这使得它可以轻松地在各种平台上安装和运行。Hugo 的运行速度非常快且可靠性高，能够在几毫秒内渲染数千页的网站。\nHextra 被设计为轻量级，具有最小化的内存占用。使用 Hextra 无需安装繁杂的依赖，比如 Node.js；相反，你只需要一个简单的 YAML 配置文件和 Markdown 内容。因此，我们可以专注于内容而非在配置环境上浪费精力。","鸣谢#鸣谢":"Hextra 的设计离不开这些项目的支持和其提供的灵感：\nHugo Tailwind CSS Heroicons Nextra Next.js "},"title":"关于"},"/zh-cn/blog/":{"data":{"":" RSS 订阅 "},"title":"博客"},"/zh-cn/docs/":{"data":{"":"👋 你好！欢迎来到 Hextra 文档！","hextra-是什么#Hextra 是什么？":"Hextra 是一款现代、快速且内置丰富功能的 [Hugo][hugo] 主题，它是用 [Tailwind CSS][tailwind-css] 构建的。该主题旨在创建美观的文档、博客和网站，提供了开箱即用的功能和灵活性以满足各种需求。","功能特点#功能特点":" 优美的设计 - 受到 Nextra 的启发，Hextra 利用 Tailwind CSS 提供了一种现代设计，使您的网站看起来出色。 响应式布局和深色模式 - 无论是在移动设备、平板还是桌面上，都表现出色。同时支持深色模式以适应各种光线条件。 快速和轻量级 - 由 Hugo 驱动，一个轻量级且超快的静态网站生成器，封装在一个单一的二进制文件中，Hextra 保持其占用极小。使用它不需要 Javascript 或 Node.js。 全文搜索 - 内置的离线全文搜索由 FlexSearch 提供支持，无需额外配置。 功能全面 - 支持 Markdown、语法高亮、LaTeX 数学公式、图表以及 Shortcodes 元素以增强您的内容。目录、面包屑、分页、侧边栏导航等都会自动生成。 多语言和 SEO 支持 - Hugo 的多语言模式轻松支持多语言网站。对于 SEO 标签、Open Graph 和 Twitter 卡片，也提供了开箱即用的支持。 ","接下来#接下来":"直接进入以下部分开始：\n入门指南学习如何使用 Hextra 创建网站 ","有问题或反馈#有问题或反馈？":" ❓ Hextra 仍在积极开发中。 有问题或反馈？请随时提出问题！ "},"title":"文档"},"/zh-cn/docs/advanced/":{"data":{"":"此部分提供了 Hextra 的一些高级配置。\n多语言 定制化 "},"title":"高级配置"},"/zh-cn/docs/advanced/comments/":{"data":{"":"Hextra 支持在你的网站中添加评论系统。 目前已经支持 giscus.","giscus#giscus":"giscus 是由 GitHub Discussions驱动的评论系统。Giscus 免费并且开源。\n如需启用 Giscus, 你需要在配置文件中添加以下内容：\nhugo.yamlparams: comments: enable: false type: giscus giscus: repo: \u003crepository\u003e repoId: \u003crepository ID\u003e category: \u003ccategory\u003e categoryId: \u003ccategory ID\u003e Giscus 配置可以参考 giscus.app，还可以在那里找到更多详细信息。\n可以在 front matter 中启用或禁用特定页面的评论：\ncontent/docs/about.md--- title: About comments: true --- "},"title":"Comments"},"/zh-cn/docs/advanced/customization/":{"data":{"":"Hextra 在 hugo.yaml 中提供了一些自定义选项来配置主题。 本页介绍了可用选项以及如何进一步自定义主题。","自定义-css#自定义 CSS":"要添加自定义 CSS，我们需要在站点中创建一个文件 assets/css/custom.css。Hextra 将自动加载该文件，比如自定义字体：\nassets/css/custom.css.content { font-family: \"Times New Roman\", Times, serif; } 主题色 主题色可以通过设置 --primary-hue 变量来自定义：\nassets/css/custom.css:root { --primary-hue: 100deg; } 代码高亮 代码高亮风格的详细信息可在 Chroma Styles Gallery 中找到。可以使用以下命令生成样式表：\nhugo gen chromastyles --style=github 可将生成的样式添加到自定义 CSS 文件中以覆盖默认代码高亮样式。","自定义-script#自定义 Script":"你可以添加以下文件以自定义 script 添加到每页的 head 最后：\nlayouts/partials/custom/head-end.html ","自定义布局#自定义布局":"可以在站点的 layouts 目录中创建同名文件来覆盖主题的默认布局。 例如，要覆盖文档的 single.html 布局，在站点中创建文件 layouts/docs/single.html。\n如需或许更多信息，转至 Hugo Templates。","进一步定制-hextra#进一步定制 Hextra":"没有找到你想修改的内容？在 GitHub 上创建 Discussion 或为 Hextra 贡献你的智慧！"},"title":"自定义"},"/zh-cn/docs/advanced/multi-language/":{"data":{"":"Hextra 支持使用 Hugo 的多语言模式 创建多语言的网站。","启用多语言支持#启用多语言支持":"为了使我们的网站支持多语言，我们需要告诉 Hugo 需要支持的语言。 在站点配置文件中添加：\nhugo.yamldefaultContentLanguage: en languages: en: languageName: English weight: 1 fr: languageName: Français weight: 2 ja: languageName: 日本語 weight: 3 ","按文件名管理翻译#按文件名管理翻译":"Hugo 支持按文件名管理翻译。例如，如果我们有一个英文文件 content/docs/_index.md，我们可以创建一个翻译为法语的文件 content/docs/_index.fr.md。\ncontent docs _index.md _index.fr.md _index.ja.md 注意：Hugo 还支持按内容目录管理翻译。","更多参考#更多参考":" Hugo Multilingual Mode Hugo Multilingual Part 1: Content translation Hugo Multilingual Part 2: Strings localization ","翻译字符串#翻译字符串":"要翻译其他地方的字符串，我们需要将翻译添加到相应的 i18n 文件中：\ni18n/fr.yamlreadMore: Lire la suite ","翻译菜单项#翻译菜单项":"要翻译导航栏中的菜单项，我们需要设置 identifier 字段：\nhugo.yamlmenu: main: - identifier: documentation name: Documentation pageRef: /docs weight: 1 - identifier: blog name: Blog pageRef: /blog weight: 2 "},"title":"多语言"},"/zh-cn/docs/getting-started/":{"data":{"":"","作为新项目开始#作为新项目开始":"前提条件 在开始之前，请确保我们已经安装了 Hugo。 请参考 Hugo 的官方安装指南以获取更多详情。\nHugo 模块是管理 Hugo 主题的推荐方式。要使用 Hugo 模块，我们需要安装 Git 和 Go。\n初始化 Hugo 站点 hugo new site my-site --format=yaml 通过 Hugo Module 安装 # 初始化 Hugo 模块 cd my-site hugo mod init github.com/username/my-site # 添加 Hextra hugo mod get github.com/imfing/hextra 编辑 hugo.yaml 以启用 Hextra：\nmodule: imports: - path: github.com/imfing/hextra 通过 Git Submodule 安装 先决条件 在我们开始之前，你必须先确保以下软件已经安装：\nHugo (extended version) Git 步骤 初始化 Hugo 站点 hugo new site my-site --format=yaml 将 Hextra 添加为 Git Submodule git submodule add https://github.com/imfing/hextra.git themes/hextra 添加以下内容来配置 hugo.yaml 以使用 Hextra：\ntheme: hextra 创建你的第一个内容页 让我们为主页和文档页面创建一个新的内容页面：\nhugo new content/_index.md hugo new content/docs/_index.md 在本地预览站点 hugo server --buildDrafts --disableFastRender 瞧！你现在可以在 http://localhost:1313/ 看到你的新站点。\n使用 CI/CD 进行部署时，必须确保在运行 hugo 命令之前执行以下命令。\ngit submodule update --init 如果不运行此命令，theme 中将不会存在 Hextra 文件，进而导致构建失败。\n如何更新主题？ 如需把项目中所有的 Hugo Modules 都升级到最新，在终端中运行此命令：\nhugo mod get -u 如需把 Hextra 升级到最新的发行版本, 在终端中运行此命令：\nhugo mod get -u github.com/imfing/hextra 如果你需要获得更多信息，参见 Hugo Modules.","使用模板快速开始#使用模板快速开始":" imfing/hextra-starter-template\n通过使用上面的模板仓库，您将能够快速地开始。\n我们提供了一个 GitHub Actions 工作流，它可以帮助您自动构建并部署您的网站到 GitHub Pages，并免费托管。\n🌐 演示 ↗","接下来#接下来":"探索这些文档以便添加更多内容：\nOrganize Files Configuration Markdown "},"title":"快速开始"},"/zh-cn/docs/guide/":{"data":{"":"探索以下各节以学习如何使用 Hextra 编写内容：\n目录结构 配置 Markdown 代码高亮 LaTeX 公式 图表 短代码 "},"title":"指南"},"/zh-cn/docs/guide/configuration/":{"data":{"":"Hugo 从 Hugo 网站根目录下的 hugo.yaml 读取配置。 在配置文件中，您可以配置站点的所有选项。 你可以在 exampleSite/hugo.yaml 中找到此站点的配置文件作为开始。","footer#Footer":"版权声明 如需修改网站页脚中显示的版权文本，您需要创建一个名为“i18n/en.yaml”的文件。 在此文件中，填写新的版权文本，像这样：\ni18n/en.yamlcopyright: \"© 2024 YOUR TEXT HERE\" 你可以在 GitHub 存储库中找到示例 i18n/en.yaml 文件。另外，你可以在版权文本中使用 Markdown 格式。","侧边栏#侧边栏":"主侧边栏 主侧边栏是自动从 content 目录结构生成的。 有关更多详细信息，转至 目录结构。\n额外链接 侧边栏的额外链接在配置文件的 menu.sidebar 部分中配置：\nhugo.yamlmenu: sidebar: - name: More params: type: separator weight: 1 - name: \"About\" pageRef: \"/about\" weight: 2 - name: \"Hugo Docs ↗\" url: \"https://gohugo.io/documentation/\" weight: 3 ","其他#其他":"Favicon 如需自定义 favicon，请将图标文件放在 static 文件夹下以覆盖 主题中的默认 favicon：\nstatic android-chrome-192x192.png android-chrome-512x512.png apple-touch-icon.png favicon-16x16.png favicon-32x32.png favicon-dark.svg favicon.ico favicon.svg site.webmanifest 在您的项目中包含 favicon.ico 和 favicon.svg 文件，以确保网站的网站图标正确显示。\n虽然 favicon.ico 通常适用于较旧的浏览器，但 favicon.svg 受到现代浏览器的支持，所以更现代的做法是添加 favicon-dark.svg 以便在黑暗模式下提供较好的体验体验。\n请随意使用 favicon.io 或 favycon 等工具来生成这些图标。\n颜色主题配置 使用theme设置来配置默认主题模式和切换按钮，允许访问者在浅色或深色模式之间切换。\nhugo.yamlparams: theme: # light | dark | system default: system displayToggle: true theme.default 的可选项：\nlight - 仅使用浅色模式 dark - 仅使用神色模式 system - 跟随系统 theme.displayToggle 控制显示用于更改主题的切换按钮。 当设置为“true”时，访问者可以在浅色或深色模式之间切换，覆盖默认设置。\n页宽 页面的宽度可以通过配置文件中的params.page.width参数来调整：\nhugo.yamlparams: page: # full (100%), wide (90rem), normal (1280px) width: wide 有三个可选项：full, wide, and normal. 默认的页宽模式是 normal.\n同样的，导航栏和 footer 的宽度也可通过 params.navbar.width 和 params.footer.width 调整。\n搜索 默认情况下启用由 FlexSearch 提供全文搜索。 要自定义搜索索引，请在配置文件中设置 params.search.flexsearch.index ：\nhugo.yamlparams: # Search search: enable: true type: flexsearch flexsearch: # index page by: content | summary | heading | title index: content flexsearch.index 的可选项：\ncontent - 全内容搜索 summary - 概述 Hugo Content Summaries heading - 一级和二级标题 title - 仅搜索标题 要自定义检索分词，请在配置文件中设置params.search.flexsearch.tokenize：\nparams: # ... flexsearch: # full | forward | reverse | strict tokenize: forward flexsearch.tokenize的可选项:\nstrict - 严格单词匹配 forward - 单词前缀匹配 reverse - 单词前后缀匹配 full - 单词子串匹配。 在默认的分词逻辑下，中文一句话就是一个“单词”\n要从搜索索引中排除页面，更改 front matter 中的 excludeSearch: true:\ncontent/docs/guide/configuration.md--- title: Configuration excludeSearch: true --- Google Analytics 要启用 Google Analytics，设置 services.googleAnalytics.ID:\nhugo.yamlservices: googleAnalytics: ID: G-MEASUREMENT_ID ","右侧边栏#右侧边栏":"目录 目录是根据内容文件中的标题自动生成的，可以在 front matter 设置 toc：false 来禁用它。\ncontent/docs/guide/configuration.md--- title: Configuration toc: false --- 编辑此页链接 要配置编辑此页链接，我们可以在配置文件中设置 params.editURL.base：\nhugo.yamlparams: editURL: base: \"https://github.com/your-username/your-repo/edit/main\" 将为每个页面自动生成编辑链接。 如需为特定页面设置编辑链接，可以在页面的 front matter 中设置 editURL：\ncontent/docs/guide/configuration.md--- title: Configuration editURL: \"https://example.com/edit/this/page\" --- ","导航栏#导航栏":"菜单 右上角的菜单在配置文件的 menu.main 中配置：\nhugo.yamlmenu: main: - name: Documentation pageRef: /docs weight: 1 - name: Blog pageRef: /blog weight: 2 - name: About pageRef: /about weight: 3 - name: Search weight: 4 params: type: search - name: GitHub weight: 5 url: \"https://github.com/imfing/hextra\" params: icon: github 有几种不同类型的菜单项：\nLink to a page in the site with pageRef - name: Documentation pageRef: /docs Link to an external URL with url - name: GitHub url: \"https://github.com\" Search bar with type: search - name: Search params: type: search Icon - name: GitHub params: icon: github 这些菜单项可以通过设置 weight 进行排序。"},"title":"配置文件"},"/zh-cn/docs/guide/deploy-site/":{"data":{"":"Hugo 生成静态站点，允许多种托管方式，你可以自由选择 本页将给出部署你的 Hextra 站点的方法","cloudflare-pages#Cloudflare Pages":" 将您的网站托管在 Git 存储库（例如 GitHub） 登录到 Cloudflare dashboard 并选择你的账户 转至在账户主页面中 Workers \u0026 Pages \u003e Create application \u003e Pages \u003e Connect to Git 选择你的仓库 Set up builds and deployments 提供以下信息： Configuration Value Production branch main Build command hugo --gc --minify Build directory public 如需了解更多内容，见：\nDeploy a Hugo site. Language support and tools. ","github-pages#GitHub Pages":"GitHub Pages 是免费部署和托管网站的推荐方法\n如果您使用以下方式引导该网站 hextra-starter-template, 它提供了开箱即用的 GitHub Actions 工作流程，有助于自动部署到 GitHub Pages\nGitHub Actions Configuration 以下是配置来自 hextra-starter-template 的 Workflow 的示例：\n.github/workflows/pages.yaml# 用于构建 Hugo 站点并将其部署到 GitHub Pages 的示例工作流程 name: Deploy Hugo site to Pages on: # 由默认分支触发 push: branches: [\"main\"] # 允许手动运行 workflow_dispatch: # 设置 GITHUB_TOKEN 的权限以允许部署到 GitHub Pages permissions: contents: read pages: write id-token: write # 仅允许一项并发部署，跳过正在进行的运行和最新排队的运行之间排队的运行 # 但是，不要取消正在进行的运行，因为我们希望完成这些生产部署 concurrency: group: \"pages\" cancel-in-progress: false # 默认为 bash defaults: run: shell: bash jobs: # 开始构建 build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.121.2 steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 0 # 获取 .GitInfo 和 .Lastmod 的所有历史记录 submodules: recursive - name: Setup Go uses: actions/setup-go@v5 with: go-version: '1.21' - name: Setup Pages id: pages uses: actions/configure-pages@v4 - name: Setup Hugo run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026\u0026 sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: Build with Hugo env: # 最大程度地向后兼容 Hugo 模块 HUGO_ENVIRONMENT: production HUGO_ENV: production run: | hugo \\ --gc --minify \\ --baseURL \"${{ steps.pages.outputs.base_url }}/\" - name: Upload artifact uses: actions/upload-pages-artifact@v3 with: path: ./public # 开始部署 deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 在仓库设置中将 Pages \u003e Build and deployment \u003e Source 调整为 GitHub Actions: 默认情况下，上述 GitHub Actions 工作流程 .github/workflows/pages.yaml 假定站点部署到 https://\u003cUSERNAME\u003e.github.io/\u003cREPO\u003e/\n如需部署到 https://\u003cUSERNAME\u003e.github.io/ 修改参数 --baseURL:\n.github/workflows/pages.yaml 54 55 56 57 run: | hugo \\ --gc --minify \\ --baseURL \"https://${{ github.repository_owner }}.github.io/\" 如需部署到自己的域，请对应修改 --baseURL","netlify#Netlify":" 将代码推送到 Git 存储库 (如 GitHub, GitLab) 导入项目 如果您不使用[hextra-starter-template][hextra-starter-template], 手动配置以下内容： C 将构建命令配置为 hugo --gc --minify 指定发布目录为 public 添加环境变量 HUGO_VERSION 并设定为 0.119.0 部署 转至 Hugo on Netlify 获得更多信息","vercel#Vercel":" 将代码推送到 Git 存储库（GitHub、GitLab 等） 转至 Vercel Dashboard 并导入你的 Hugo 项目 配置项目，选择 Hugo 作为 Framework Preset 覆盖构建命令和安装命令： 设置构建命令为 hugo --gc --minify 将安装命令设置为 yum install golang "},"title":"部署站点"},"/zh-cn/docs/guide/diagrams/":{"data":{"":"目前，Hextra 支持 Mermaid 的图表。","mermaid#Mermaid":"Mermaid 是一个基于 JavaScript 的图表绘制工具，它的文本定义和 Markdown 类似，可在浏览器中动态创建图表。例如：流程图、序列图、饼图等。\n在 Hextra 中使用 Mermaid 就像使用代码块一样简单：\n```mermaid graph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD; ``` 将呈现为：\ngraph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD;Sequence diagram：\nsequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts prevail! John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good!如需获取更多信息，转至 Mermaid Documentation。"},"title":"图表"},"/zh-cn/docs/guide/latex/":{"data":{"":"$\\KaTeX$ 用于呈现 LaTeX 数学表达式。可在 frontmatter 将 math 设置为 true 来启用。\nMarkdown--- title: \"My Page with LaTeX\" math: true --- 启用后，KaTeX 中的脚本，样式表和字体将自动包含在你的网站中。这样就可以在 Markdown 内容中使用 LaTeX 数学表达式。","化学表达式#化学表达式":"通过 mhchem 支持化学表达式。\n行内：$\\ce{H2O}$ 是水。\n独立段落：\npage.md$$\\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-}$$ $$\\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-}$$","支持的功能#支持的功能":"有关支持的符号列表，转至 KaTeX 支持的公式。","示例#示例":"Markdown 内容支持行内和独立段落的 LaTeX 数学表达式。\n行内 page.mdThis $\\sigma(z) = \\frac{1}{1 + e^{-z}}$ is inline. This $\\sigma(z) = \\frac{1}{1 + e^{-z}}$ is inline.\n独立段落 page.md$$F(\\omega) = \\int_{-\\infty}^{\\infty} f(t) e^{-j\\omega t} \\, dt$$ 将被渲染为：\n$$F(\\omega) = \\int_{-\\infty}^{\\infty} f(t) e^{-j\\omega t} , dt$$"},"title":"LaTeX 公式"},"/zh-cn/docs/guide/markdown/":{"data":{"":"Hugo 支持 Markdown 来书写内容，创建列表等。本页将向你展示一些最常见的 Markdown 语法示例。","markdown-示例#Markdown 示例":"文本样式 Style Syntax Example Output Bold **bold text** **bold text** bold text Italic *italicized text* `italicized text italicized text Strikethrough ~~strikethrough text~~ ~~strikethrough text~~ strikethrough text Subscript \u003csub\u003e\u003c/sub\u003e This is a \u003csub\u003esubscript\u003c/sub\u003e text This is a subscript text Superscript \u003csup\u003e\u003c/sup\u003e This is a \u003csup\u003esuperscript\u003c/sup\u003e text This is a superscript text 引用 带角标的块引用：\nDon’t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nMarkdown\u003e Don't communicate by sharing memory, share memory by communicating.\u003cbr\u003e \u003e — \u003ccite\u003eRob Pike[^1]\u003c/cite\u003e [^1]: The above quote is excerpted from Rob Pike's [talk](https://www.youtube.com/watch?v=PAAkCSZUG1c) during Gopherfest, November 18, 2015. 表格 表格并非核心 Markdown 规范，但 Hugo 支持开箱即用的表格：\nName Age Bob 27 Alice 23 Markdown| Name | Age | |--------|------| | Bob | 27 | | Alice | 23 | Markdown 表格中的内联 Italics Bold Code italics bold code Markdown| Italics | Bold | Code | | -------- | -------- | ------ | | *italics* | **bold** | `code` | 代码块 Syntax Highlighting 列表 有序列表 First item Second item Third item Markdown1. First item 2. Second item 3. Third item 无序列表 List item Another item And another item Markdown* List item * Another item * And another item 嵌套列表 Fruit Apple Orange Banana Dairy Milk Cheese Markdown* Fruit * Apple * Orange * Banana * Dairy * Milk * Cheese 图片 Markdown![landscape](https://picsum.photos/800/600) 带有标题：\nUnsplash Landscape Markdown![landscape](https://picsum.photos/800/600 \"Unsplash Landscape\") The above quote is excerpted from Rob Pike’s talk during Gopherfest, November 18, 2015. ↩︎","参考资料#参考资料":" Markdown Guide Markdown Cheatsheet Markdown Tutorial Markdown Reference ","配置#配置":"Hugo 使用 Goldmark 解析 Markdown。 Markdown 渲染可以在 hugo.yaml 中的 markup.goldmark 中配置。以下是Hextra的默认配置：\nhugo.yamlmarkup: goldmark: renderer: unsafe: true highlight: noClasses: false 如需了解更多选项，转至 Configure Markup。"},"title":"Markdown"},"/zh-cn/docs/guide/organize-files/":{"data":{"":"","侧边栏导航#侧边栏导航":"侧边栏导航是根据内容组织的字母顺序自动生成的。要手动配置侧边栏顺序，可以在 Markdown 文件的 frontmatter 中使用 weight 配置。\ncontent/docs/guide/_index.md--- title: Guide weight: 2 --- ℹ️ 建议侧边栏不要太深。如果内容太多，请考虑 将它们分成多个部分。 ","目录结构#目录结构":"默认情况下，Hugo 在 content 目录中搜索 Markdown 文件，目录的结构决定了网站的最终输出结构。 以示例网站为例：\ncontent _index.md docs _index.md getting-started.md guide _index.md organize-files.md blog _index.md post-1.md 每个 _index.md 文件都是相应部分的索引页，其他 Markdown 文件则是常规页面。\ncontent ├── _index.md // \u003c- / ├── docs │ ├── _index.md // \u003c- /docs/ │ ├── getting-started.md // \u003c- /docs/getting-started/ │ └── guide │ ├── _index.md // \u003c- /docs/guide/ │ └── organize-files.md // \u003c- /docs/guide/organize-files/ └── blog ├── _index.md // \u003c- /blog/ └── post-1.md // \u003c- /blog/post-1/ ","配置内容目录#配置内容目录":"如果需要为的内容使用不同的目录，可以在站点配置文件中设置 contentDir 来实现。"},"title":"目录结构"},"/zh-cn/docs/guide/shortcodes/":{"data":{"":"Hugo 短代码 是你的内容文件中调用内置或自定义模板的简单片段。\nHextra 提供了一系列美观的短代码以增强你的内容。\n注意事项 卡片 文件树 图标 步骤 标签 "},"title":"短代码"},"/zh-cn/docs/guide/shortcodes/callout/":{"data":{"":"向读者显示重要信息的内置组件。","example#Example":" 👾 标注是一段旨在吸引注意力的短文本 ℹ️ 标注是一段旨在吸引注意力的短文本。 ⚠️ 标注是一段旨在吸引注意力的短文本。 🚫 标注是一段旨在吸引注意力的短文本。 ","usage#Usage":"Default 🌐 Hugo 可用于创建各种网站，包括博客、作品集、文档网站等 {{\u003c callout emoji=\"🌐\" \u003e}} Hugo 可用于创建各种网站，包括博客、作品集、文档网站等 {{\u003c /callout \u003e}} Info ℹ️ 请访问 GitHub 查看最新版本 {{\u003c callout type=\"info\" \u003e}} 请访问 GitHub 查看最新版本 {{\u003c /callout \u003e}} Warning ⚠️ 该 API 将在下一版本中弃用 {{\u003c callout type=\"warning\" \u003e}} **标注**是一段旨在吸引注意力的简短文字 {{\u003c /callout \u003e}} Error 🚫 出问题了，要爆炸了 {{\u003c callout type=\"error\" \u003e}} 出问题了，要爆炸了 {{\u003c /callout \u003e}} "},"title":"标注"},"/zh-cn/docs/guide/shortcodes/cards/":{"data":{"":"","image-card#Image Card":"此外，该卡还支持通过以下参数添加图像和处理：\nParameter Description image 指定卡片的图像 URL. method 设置 Hugo 的图像处理方法。 options 配置 Hugo 的图像处理选项。 卡片支持三种图像：\n远程图片：完整网址应放置在 image 参数中 静态图片：使用 Hugo 的 static/ 目录中的相对路径 处理过的图片：使用 Hugo 的 assets/ 目录中的相对路径 Hextra 在构建过程中会自动检测图片是否需要处理，并根据需要应用 options 参数或默认设置（缩放，800x，质量 80，WebP 格式）。\n它目前支持以下处理方法：Resize（缩放）、Fit（适应）、Fill（填充）和 Crop（裁剪）。\n有关 Hugo 内置图像处理命令、方法和选项的更多信息，请参阅他们的 Image Processing Documentation.","使用#使用":" {{\u003c/* cards */\u003e}} {{\u003c/* card link=\"../callout\" title=\"Callout\" icon=\"warning\" */\u003e}} {{\u003c/* card link=\"/\" title=\"No Icon\" */\u003e}} {{\u003c/* /cards */\u003e}} {{\u003c/* cards */\u003e}} {{\u003c/* card link=\"/\" title=\"Image Card\" image=\"https://source.unsplash.com/featured/800x600?landscape\" subtitle=\"Unsplash Landscape\" */\u003e}} {{\u003c/* card link=\"/\" title=\"Local Image\" image=\"/images/card-image-unprocessed.jpg\" subtitle=\"Raw image under static directory.\" */\u003e}} {{\u003c/* card link=\"/\" title=\"Local Image\" image=\"images/space.jpg\" subtitle=\"Image under assets directory, processed by Hugo.\" method=\"Resize\" options=\"600x q80 webp\" */\u003e}} {{\u003c/* /cards */\u003e}} ","卡片参数#卡片参数":" Parameter Description link URL（内部或外部） title 卡片的标题 subtitle 字幕标题（支持 Markdown） icon 图标的名称 ","示例#示例":" Callout No Icon Image CardUnsplash Landscape Local ImageRaw image under static directory. Local ImageImage under assets directory, processed by Hugo. "},"title":"Cards"},"/zh-cn/docs/guide/shortcodes/details/":{"data":{"":"用于显示可折叠内容的内置组件。","usage#Usage":" {{%/* details title=\"Details\" */%}} 这是细节的内容 **支持** Markdown {{%/* /details */%}} {{%/* details title=\"Click me to reveal\" closed=\"true\" */%}} 默认情况下这将被隐藏 {{%/* /details */%}} ","示例#示例":" Details 这是细节的内容\nMarkdown is supported.\nClick me to reveal 默认情况下这将被隐藏 "},"title":"详情"},"/zh-cn/docs/guide/shortcodes/filetree/":{"data":{"":"","用法#用法":" Markdown{{\u003c/* filetree/container */\u003e}} {{\u003c/* filetree/folder name=\"content\" */\u003e}} {{\u003c/* filetree/file name=\"_index.md\" */\u003e}} {{\u003c/* filetree/folder name=\"docs\" state=\"closed\" */\u003e}} {{\u003c/* filetree/file name=\"_index.md\" */\u003e}} {{\u003c/* filetree/file name=\"introduction.md\" */\u003e}} {{\u003c/* filetree/file name=\"introduction.fr.md\" */\u003e}} {{\u003c/* /filetree/folder */\u003e}} {{\u003c/* /filetree/folder */\u003e}} {{\u003c/* filetree/file name=\"hugo.toml\" */\u003e}} {{\u003c/* /filetree/container */\u003e}} ","示例#示例":" content _index.md docs _index.md introduction.md introduction.fr.md hugo.toml "},"title":"文件树"},"/zh-cn/docs/guide/shortcodes/icon/":{"data":{"":"要内联使用此短代码，需要在配置中启用内联短代码：\nhugo.yamlenableInlineShortcodes: true 可用图标列表可以在以下位置找到 data/icons.yaml.","用法#用法":" {{\u003c/* icon \"github\" */\u003e}} Heroicons v1 轮廓图标开箱即用\n如何添加自己的图标 创建 data/icons.yaml 文件，然后按以下格式添加您自己的 SVG 图标：\ndata/icons.yamlyour-icon: \u003csvg\u003eyour icon svg content\u003c/svg\u003e 然后可以在短代码中使用它，如下所示：\n{{\u003c/* icon \"your-icon\" */\u003e}} {{\u003c/* card icon=\"your-icon\" */\u003e}} 提示：Iconify Design 是为您的网站查找 SVG 图标的好地方","示例#示例":" "},"title":"图标"},"/zh-cn/docs/guide/shortcodes/steps/":{"data":{"":"A built-in component to display a series of steps.","使用#使用":"将 Markdown h3 标题放入 steps 短代码中。\n{{%/* steps */%}} ### Step 1 This is the first step. ### Step 2 This is the second step. {{%/* /steps */%}} ","示例#示例":" 第一步 这是第一步。\n第二步 这是第二步。\n第三步 这是第三步。"},"title":"步骤"},"/zh-cn/docs/guide/shortcodes/tabs/":{"data":{"":"","使用#使用":"默认情况下 {{\u003c tabs items=\"JSON,YAML,TOML\" \u003e}} {{\u003c tab \u003e}}**JSON**: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**YAML**: YAML is a human-readable data serialization language.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**TOML**: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.{{\u003c /tab \u003e}} {{\u003c /tabs \u003e}} 指定索引 使用 defaultIndex 属性指定选定的选项卡。索引从 0 开始。\n{{\u003c tabs items=\"JSON,YAML,TOML\" defaultIndex=\"1\" \u003e}} {{\u003c tab \u003e}}**JSON**: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**YAML**: YAML is a human-readable data serialization language.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**TOML**: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.{{\u003c /tab \u003e}} {{\u003c /tabs \u003e}} 默认为 YAML\nJSONYAMLTOML JSON: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax. YAML: YAML is a human-readable data serialization language. TOML: TOML aims to be a minimal configuration file format that’s easy to read due to obvious semantics. 使用 Markdown 还支持包括代码块的 Markdown 语法：\n{{\u003c tabs items=\"JSON,YAML,TOML\" \u003e}} {{\u003c tab \u003e}} ```json { \"hello\": \"world\" } ``` {{\u003c /tab \u003e}} ... add other tabs similarly {{\u003c /tabs \u003e}} JSONYAMLTOML { \"hello\": \"world\" } hello: world hello = \"world\" ","示例#示例":" JSONYAMLTOML JSON: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax. YAML: YAML is a human-readable data serialization language. TOML: TOML aims to be a minimal configuration file format that’s easy to read due to obvious semantics. "},"title":"标签页"},"/zh-cn/docs/guide/syntax-highlighting/":{"data":{"":"Hugo 使用 Chroma，一种纯 Golang 实现的代码高亮渲染器。 建议对 Markdown 内容中的代码块使用反引号，例如：\nMarkdown```python def say_hello(): print(\"Hello!\") ``` 将呈现为：\ndef say_hello(): print(\"Hello!\") ","支持的编程语言#支持的编程语言":"如需了解支持的编程语言，转至 Chroma’s documentation。","特性#特性":"文件名 要向代码块添加文件名或标题，请设置 filename：\nMarkdown```python {filename=\"hello.py\"} def say_hello(): print(\"Hello!\") ``` hello.pydef say_hello(): print(\"Hello!\") 行号 如需设置行号，将 linenos 设置为 table，并将 linenostart 设置为起始行号：\nMarkdown```python {linenos=table,linenostart=42} def say_hello(): print(\"Hello!\") ``` 42 43 def say_hello(): print(\"Hello!\") 高亮行 显示高亮行，设置 hl_lines 为行号：\nMarkdown```python {linenos=table,hl_lines=[2,4],linenostart=1,filename=\"hello.py\"} def say_hello(): print(\"Hello!\") def main(): say_hello() ``` hello.py 1 2 3 4 5 def say_hello(): print(\"Hello!\") def main(): say_hello() 复制按钮 默认情况下，代码块复制按钮已自动启用。"},"title":"代码高亮"},"/zh-cn/showcase/":{"data":{"":" 由 Hextra 驱动的开源网站和项目。 AXIVO Docs Stanford CS 40 Helix Docs Clever Cloud Documentation OWASP AI Security and Privacy Guide Osuny Porter HITSZ OpenAuto LutheranConfessions Hextra Starter Template "},"title":"项目展示"}}